import * as g from "./glossUtils";

// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 1.2.2 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

("use strict");

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation =
  | ILiteralExpectation
  | IClassExpectation
  | IAnyExpectation
  | IEndExpectation
  | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || " ";
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g, '\\"')
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g, (ch) => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x" + hex(ch));
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g, "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g, (ch) => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x" + hex(ch));
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return '"' + literalEscape(expectation.text) + '"';
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) +
                  "-" +
                  classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return (
            descriptions.slice(0, -1).join(", ") +
            ", or " +
            descriptions[descriptions.length - 1]
          );
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? '"' + literalEscape(found1) + '"' : "end of input";
    }

    return (
      "Expected " +
      describeExpected(expected) +
      " but " +
      describeFound(found) +
      " found."
    );
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(
    message: string,
    expected: Expectation[],
    found: string | null,
    location: IFileRange
  ) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = "Error: " + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ":" + s.line + ":" + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd("", s.line.toString().length, " ");
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str +=
          "\n --> " +
          loc +
          "\n" +
          filler +
          " |\n" +
          s.line +
          " | " +
          line +
          "\n" +
          filler +
          " | " +
          peg$padEnd("", s.column - 1, " ") +
          peg$padEnd("", last - s.column, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: { [id: string]: any } = {
    Expression: peg$parseExpression,
  };
  let peg$startRuleFunction: () => any = peg$parseExpression;

  const peg$c0 = function (groups: any): any {
    return new g.GlossDocument(groups);
  };
  const peg$c1 = function (newSegment: any, base: any): any {
    base.segments.unshift(newSegment);
    base.column = location().start.column;
    base.line = location().start.line;
    base.location = String([base.line, base.column]);
    return base;
  };
  const peg$c2 = function (segment: any, inflection: any): any {
    const segments = [segment];
    if (inflection) segments.push(inflection);
    return new g.CharacterGloss({
      segments,
      location: [location().start.line, location().start.column],
    });
  };
  const peg$c3 = "(";
  const peg$c4 = peg$literalExpectation("(", false);
  const peg$c5 = ")";
  const peg$c6 = peg$literalExpectation(")", false);
  const peg$c7 = function (gloss: any, idiomatic: any): any {
    if (!gloss.amend) console.log("no amend", { gloss });
    gloss.amend({ idiomatic });
    return gloss;
  };
  const peg$c8 = "-";
  const peg$c9 = peg$literalExpectation("-", false);
  const peg$c10 = function (gloss: any): any {
    return gloss;
  };
  const peg$c11 = function (
    firstComponents: any,
    lastComponentGloss: any
  ): any {
    const components = [...firstComponents, lastComponentGloss];
    const glossLocation: [number, number] = [
      location().start.line,
      location().start.column,
    ];
    if (lastComponentGloss.segments.some((s: any) => s.text.includes("tire")))
      throw new Error("kk it's parser");
    for (const component of components) {
      component.attachToCompound(glossLocation);
    }
    const meaning = lastComponentGloss.idiomatic;
    lastComponentGloss.amend({ idiomatic: null });
    return new g.CompoundGloss({
      location: glossLocation,
      meaning,
      components,
    });
  };
  const peg$c12 = function (number: any, prePadding: any, gloss: any): any {
    gloss.components[0].amend({ prePadding });
    gloss.number = number;
    return new g.GlossGroup({
      characters: [...gloss.components],
      compounds: { [gloss.location]: gloss },
    });
  };
  const peg$c13 = function (number: any, prePadding: any, gloss: any): any {
    return new g.GlossGroup({
      characters: [gloss.amend({ number: +number, prePadding })],
    });
  };
  const peg$c14 = function (gloss: any): any {
    return new g.GlossGroup({
      characters: [...gloss.components],
      compounds: { [gloss.location]: gloss },
    });
  };
  const peg$c15 = function (gloss: any): any {
    return new g.GlossGroup({
      characters: [gloss],
    });
  };
  const peg$c16 = function (baseGroup: any, postPadding: any, ep: any): any {
    baseGroup.endPunctuation = ep;
    baseGroup.characters[baseGroup.characters.length - 1].amend({
      postPadding,
    });
    return baseGroup;
  };
  const peg$c17 = function (
    baseGroup: any,
    w: any,
    postPadding: any,
    groupToIntegrate: any
  ): any {
    const lastChar = baseGroup.characters[baseGroup.characters.length - 1];
    const nextChar = groupToIntegrate.characters[0];
    if (postPadding) {
      if (
        nextChar.number != null ||
        groupToIntegrate.compounds[nextChar.compoundLocation]?.number != null
      ) {
        lastChar.amend({
          postPadding:
            (lastChar.postPadding || "") +
            w +
            (postPadding || "") +
            (groupToIntegrate.prePadding || ""),
        });
      } else {
        nextChar.amend({
          prePadding:
            w +
            (postPadding || "") +
            (groupToIntegrate.prePadding || "") +
            (nextChar.prePadding || ""),
        });
      }
    }

    for (const c of groupToIntegrate.characters) baseGroup.characters.push(c);
    Object.assign(baseGroup.compounds, groupToIntegrate.compounds);
    baseGroup.endPunctuation = groupToIntegrate.endPunctuation;
    return baseGroup;
  };
  const peg$c18 = function (prePadding: any, baseGroup: any): any {
    baseGroup.prePadding = prePadding + (baseGroup.prePadding || "");
    return baseGroup;
  };
  const peg$c19 = function (pre: any, filler: any, w: any): any {
    return (pre || "") + filler;
  };
  const peg$c20 = function (w: any, filler: any, post: any): any {
    return filler + (post || "");
  };
  const peg$c21 = peg$otherExpectation("pre-padding punctuation");
  const peg$c22 = /^[ ]/;
  const peg$c23 = peg$classExpectation([" "], false, false);
  const peg$c24 = '"';
  const peg$c25 = peg$literalExpectation('"', false);
  const peg$c26 = peg$otherExpectation("quote");
  const peg$c27 = "[";
  const peg$c28 = peg$literalExpectation("[", false);
  const peg$c29 = "]";
  const peg$c30 = peg$literalExpectation("]", false);
  const peg$c31 = function (chars: any): any {
    return chars;
  };
  const peg$c32 = peg$otherExpectation("identifier characters");
  const peg$c33 = "\\";
  const peg$c34 = peg$literalExpectation("\\", false);
  const peg$c35 = peg$anyExpectation();
  const peg$c36 = /^[a-zA-Z'*_~]/;
  const peg$c37 = peg$classExpectation(
    [["a", "z"], ["A", "Z"], "'", "*", "_", "~"],
    false,
    false
  );
  const peg$c38 = /^[a-zA-Z'*_~\-]/;
  const peg$c39 = peg$classExpectation(
    [["a", "z"], ["A", "Z"], "'", "*", "_", "~", "-"],
    false,
    false
  );
  const peg$c40 = /^[a-zA-Z'*_~\- ]/;
  const peg$c41 = peg$classExpectation(
    [["a", "z"], ["A", "Z"], "'", "*", "_", "~", "-", " "],
    false,
    false
  );
  const peg$c42 = function (x: any): any {
    return new g.GlossSegment({
      role: "LemmaComponent",
      text: x,
      column: location().start.column,
    });
  };
  const peg$c43 = function (chars: any): any {
    return new g.GlossSegment({
      role: "Inflection",
      text: chars,
      column: location().start.column,
    });
  };
  const peg$c44 = ":";
  const peg$c45 = peg$literalExpectation(":", false);
  const peg$c46 = function (): any {
    return "";
  };
  const peg$c47 = peg$otherExpectation("space");
  const peg$c48 = " ";
  const peg$c49 = peg$literalExpectation(" ", false);
  const peg$c50 = peg$otherExpectation("end punctuation");
  const peg$c51 = /^[.!?,;\n\r]/;
  const peg$c52 = peg$classExpectation(
    [".", "!", "?", ",", ";", "\n", "\r"],
    false,
    false
  );
  const peg$c53 = "--";
  const peg$c54 = peg$literalExpectation("--", false);
  const peg$c55 = /^[1-9]/;
  const peg$c56 = peg$classExpectation([["1", "9"]], false, false);
  const peg$c57 = peg$otherExpectation("mandatorywhitespace");

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error(
        "Can't start parsing from rule \"" + options.startRule + '".'
      );
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 =
      location1 !== undefined
        ? location1
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 =
      location1 !== undefined
        ? location1
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(
    text1: string,
    ignoreCase: boolean
  ): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(
    parts: IClassParts,
    inverted: boolean,
    ignoreCase: boolean
  ): IClassExpectation {
    return {
      type: "class",
      parts: parts,
      inverted: inverted,
      ignoreCase: ignoreCase,
    };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(
    expected1: Expectation[],
    found: string | null,
    location1: IFileRange
  ) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseExpression(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseGlossGroup();
    if ((s2 as any) !== peg$FAILED) {
      while ((s2 as any) !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseGlossGroup();
      }
    } else {
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSingleCharacterGloss(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseInflection();
    if ((s1 as any) === peg$FAILED) {
      s1 = peg$parseGlossLemmaSegment();
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSingleCharacterGloss();
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseGlossLemmaSegment();
      if ((s1 as any) !== peg$FAILED) {
        s2 = peg$parseInflection();
        if ((s2 as any) === peg$FAILED) {
          s2 = null;
        }
        if ((s2 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSingleCharacterGlossWithIdiomatic(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSingleCharacterGloss();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse___();
      if ((s2 as any) !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c4);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseIdiomaticGlossSegment();
          if ((s5 as any) !== peg$FAILED) {
            while ((s5 as any) !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseIdiomaticGlossSegment();
            }
          } else {
            s4 = peg$FAILED;
          }
          if ((s4 as any) !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c6);
              }
            }
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompoundContinuation(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSingleCharacterGloss();
    if ((s1 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c9);
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompoundGloss(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCompoundContinuation();
    if ((s2 as any) !== peg$FAILED) {
      while ((s2 as any) !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseCompoundContinuation();
      }
    } else {
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseSingleCharacterGlossWithIdiomatic();
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGlossOrderingUnit(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parsePrePadding();
      if ((s2 as any) === peg$FAILED) {
        s2 = null;
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseCompoundGloss();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c12(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNumber();
      if ((s1 as any) !== peg$FAILED) {
        s2 = peg$parsePrePadding();
        if ((s2 as any) === peg$FAILED) {
          s2 = null;
        }
        if ((s2 as any) !== peg$FAILED) {
          s3 = peg$parseSingleCharacterGlossWithIdiomatic();
          if ((s3 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumber();
        if ((s1 as any) !== peg$FAILED) {
          s2 = peg$parsePrePadding();
          if ((s2 as any) === peg$FAILED) {
            s2 = null;
          }
          if ((s2 as any) !== peg$FAILED) {
            s3 = peg$parseSingleCharacterGloss();
            if ((s3 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCompoundGloss();
          if ((s1 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s1);
          }
          s0 = s1;
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSingleCharacterGlossWithIdiomatic();
            if ((s1 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s1);
            }
            s0 = s1;
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSingleCharacterGloss();
              if ((s1 as any) !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseGlossGroup(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseGlossOrderingUnit();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parsePostPadding();
      if ((s2 as any) === peg$FAILED) {
        s2 = null;
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseEndPunctuation();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseGlossOrderingUnit();
      if ((s1 as any) !== peg$FAILED) {
        s2 = peg$parse___();
        if ((s2 as any) !== peg$FAILED) {
          s3 = peg$parsePrePadding();
          if ((s3 as any) === peg$FAILED) {
            s3 = null;
          }
          if ((s3 as any) !== peg$FAILED) {
            s4 = peg$parseGlossGroup();
            if ((s4 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c17(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePrePadding();
        if ((s1 as any) !== peg$FAILED) {
          s2 = peg$parseGlossGroup();
          if ((s2 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c18(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsePrePadding(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseQuote();
    if ((s1 as any) === peg$FAILED) {
      s1 = null;
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseTranslationFiller();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse___();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parsePrePaddingPunctuation();
    }

    return s0;
  }

  function peg$parsePostPadding(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseTranslationFiller();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseQuote();
        if ((s3 as any) === peg$FAILED) {
          s3 = null;
        }
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parsePostPaddingPunctuation();
    }

    return s0;
  }

  function peg$parsePrePaddingPunctuation(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c22.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c23);
      }
    }
    if ((s3 as any) !== peg$FAILED) {
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        if (peg$c22.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c23);
          }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if ((s2 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c24;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c25);
        }
      }
      if ((s3 as any) === peg$FAILED) {
        s3 = null;
      }
      if ((s3 as any) !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseQuote();
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c21);
      }
    }

    return s0;
  }

  function peg$parsePostPaddingPunctuation(): any {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c24;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c25);
      }
    }
    if ((s2 as any) === peg$FAILED) {
      s2 = null;
    }
    if ((s2 as any) !== peg$FAILED) {
      s3 = [];
      if (peg$c22.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c23);
        }
      }
      if ((s4 as any) !== peg$FAILED) {
        while ((s4 as any) !== peg$FAILED) {
          s3.push(s4);
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c23);
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if ((s3 as any) !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c21);
      }
    }

    return s0;
  }

  function peg$parseQuote(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c24;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c25);
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c26);
      }
    }

    return s0;
  }

  function peg$parseTranslationFiller(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c27;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c28);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseIdentifierCharactersAllowingSpaces();
      if ((s2 as any) !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c29;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c30);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGlossSegment(): any {
    let s0;

    s0 = peg$parseGlossLemmaSegment();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseInflection();
    }

    return s0;
  }

  function peg$parseIdiomaticGlossSegment(): any {
    let s0;

    s0 = peg$parseGlossLemmaSegmentAllowingHyphens();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseInflection();
    }

    return s0;
  }

  function peg$parseIdentifierCharacters(): any {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s3 = peg$c33;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c34);
      }
    }
    if ((s3 as any) !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      if ((s4 as any) !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if ((s2 as any) === peg$FAILED) {
      s2 = peg$currPos;
      if (peg$c36.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c37);
        }
      }
      if ((s3 as any) !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
    }
    if ((s2 as any) !== peg$FAILED) {
      while ((s2 as any) !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c34);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }
          if ((s4 as any) !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if ((s2 as any) === peg$FAILED) {
          s2 = peg$currPos;
          if (peg$c36.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c37);
            }
          }
          if ((s3 as any) !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c32);
      }
    }

    return s0;
  }

  function peg$parseIdentifierCharactersAllowingHyphens(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s3 = peg$c33;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c34);
      }
    }
    if ((s3 as any) !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      if ((s4 as any) !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if ((s2 as any) === peg$FAILED) {
      s2 = peg$currPos;
      if (peg$c38.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c39);
        }
      }
      if ((s3 as any) !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
    }
    if ((s2 as any) !== peg$FAILED) {
      while ((s2 as any) !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c34);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }
          if ((s4 as any) !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if ((s2 as any) === peg$FAILED) {
          s2 = peg$currPos;
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c39);
            }
          }
          if ((s3 as any) !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseIdentifierCharactersAllowingSpaces(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s3 = peg$c33;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c34);
      }
    }
    if ((s3 as any) !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      if ((s4 as any) !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if ((s2 as any) === peg$FAILED) {
      s2 = peg$currPos;
      if (peg$c40.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }
      if ((s3 as any) !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
    }
    if ((s2 as any) !== peg$FAILED) {
      while ((s2 as any) !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c34);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }
          if ((s4 as any) !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if ((s2 as any) === peg$FAILED) {
          s2 = peg$currPos;
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c41);
            }
          }
          if ((s3 as any) !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseGlossLemmaSegment(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifierCharacters();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c42(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGlossLemmaSegmentAllowingHyphens(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifierCharactersAllowingHyphens();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c42(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseInflection(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c27;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c28);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseIdentifierCharacters();
      if ((s2 as any) !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c29;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c30);
          }
        }
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c28);
        }
      }
      if ((s1 as any) !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = [];
        if (input.charCodeAt(peg$currPos) === 45) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c9);
          }
        }
        if ((s5 as any) !== peg$FAILED) {
          while ((s5 as any) !== peg$FAILED) {
            s4.push(s5);
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c8;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c9);
              }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if ((s4 as any) !== peg$FAILED) {
          s5 = peg$parseIdentifierCharacters();
          if ((s5 as any) === peg$FAILED) {
            s5 = null;
          }
          if ((s5 as any) !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if ((s3 as any) !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if ((s2 as any) !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c30);
            }
          }
          if ((s3 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c43(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c27;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c28);
          }
        }
        if ((s1 as any) !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c44;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c45);
            }
          }
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseIdentifierCharacters();
            if ((s5 as any) !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if ((s3 as any) !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if ((s2 as any) !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c29;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c30);
              }
            }
            if ((s3 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c43(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseEndPunctuation(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseSpace();
    while ((s3 as any) !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseSpace();
    }
    if ((s2 as any) !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseNonSpaceEndPunctuation();
      if ((s4 as any) !== peg$FAILED) {
        while ((s4 as any) !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseNonSpaceEndPunctuation();
        }
      } else {
        s3 = peg$FAILED;
      }
      if ((s3 as any) !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseSpace();
        while ((s5 as any) !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseSpace();
        }
        if ((s4 as any) !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      peg$silentFails--;
      if ((s2 as any) === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if ((s1 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c46();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseSpace(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c48;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c49);
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c47);
      }
    }

    return s0;
  }

  function peg$parseNonSpaceEndPunctuation(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$c51.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c52);
      }
    }
    if ((s2 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c24;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c25);
        }
      }
      if ((s3 as any) === peg$FAILED) {
        s3 = null;
      }
      if ((s3 as any) !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c53) {
        s0 = peg$c53;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c54);
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c50);
      }
    }

    return s0;
  }

  function peg$parseNumber(): any {
    let s0;

    if (peg$c55.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c56);
      }
    }

    return s0;
  }

  function peg$parse___(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 32) {
      s2 = peg$c48;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c49);
      }
    }
    if ((s2 as any) !== peg$FAILED) {
      while ((s2 as any) !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c48;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c49);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if ((s1 as any) !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c57);
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;
